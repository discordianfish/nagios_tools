#!/usr/bin/python

import getopt
import sys
import urllib
import signal
import time

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3
STATE_DEPENDENT = 4
ALLOWED_BACKLOG = 5 # in 'sample periods'

class TimeoutException(Exception):
    def __str__(self):
        return "Timeout error"


def usage():
    print 'Usage:'
    print '\tcheck_graphite_data <options>'
    print 'Options:'
    print '\t-c <num> --crit=<num>\t\tCritical threshold'
    print '\t-w <num> --warn=<num>\t\tWarning threshold'
    print '\t-u <url> --url=<url>\t\tGraphite rawData URL'
    print '\t-r\t\t\t\tReverse - Alert when the value is UNDER warn/crit instead of OVER'
    print '\t-s <secs> --seconds=<secs>\tAverage over the last N seconds of data'
    print '\t-t <secs> --timeout=<secs>\tGraphite response timeout'


def get_value(url, seconds=0, timeout=10):
    """Get the value from a Graphite graph"""

    def timeout_handler(signum, frame):
        raise TimeoutException()

    # Make sure the url ends with '&rawData'
    if not url.endswith('&rawData'):
        url = url + '&rawData'

    old_handler = signal.signal(signal.SIGALRM, timeout_handler)
    signal.alarm(timeout)

    try:
        data = urllib.urlopen(url).read()
    finally:
        signal.signal(signal.SIGALRM, old_handler)

    if not data:
        print 'Error: %s returned nothing. Wrong path?' % url
        sys.exit(STATE_UNKNOWN)
    
    header = data.split('|')[0]
       
    key, start, end, sample_period = header.split(',')
    sample_period = int(sample_period)
    all_data_points = data.split('|')[-1].split(',')

    if end < time.time() + sample_period * ALLOWED_BACKLOG:
        print 'Error: data to old, last data point: %s' % time.ctime(end)
        sys.exit(STATE_UNKNOWN)


    # Evaluate what graphite returned, should either be a float, or None
    # First, if the number of seconds of data we want to examine is smaller or
    # equals the graphite sample period, just grab the latest data point.
    # If that data point is None, grab the one before it.
    # If that is None too, return 0.0.
    if seconds <= sample_period:
        if eval(all_data_points[-1]):
            data_value = float(all_data_points[-1])
        elif eval(all_data_points[-2]):
            data_value = float(all_data_points[-2])
        else:
            data_value = 0.0
    else:
    # Second, if we requested more than on graphite sample period, work out how
    # many sample periods we wanted (python always rounds division *down*)
        data_points = (seconds/sample_period)
        data_set = [ float(x) for x in all_data_points[-data_points:]
                     if eval(x) ]
        if data_set:
            data_value = float( sum(data_set) / len(data_set) )
        else:
            data_value = 0.0
    return data_value


def main(argv):
    try:
        opts, args = getopt.getopt(argv, 'hru:c:w:s:t:', ['help', 'url=', 'crit=', 'warn=', 'seconds=', 'timeout='])
    except getopt.GetoptError, err:
        print str(err)
        sys.exit(STATE_UNKNOWN)

    url = None
    warn = None
    crit = None
    seconds = 0
    timeout = 10
    reverse = False
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit()
        elif opt in ('-u', '--url'):
            url = arg
        elif opt in ('-w', '--warn'):
            warn = float(arg)
        elif opt in ('-c', '--crit'):
            crit = float(arg)
        elif opt in ('-s', '--seconds'):
            seconds = int(arg)
        elif opt in ('-t', '--timeout'):
            timeout = int(arg)
        elif opt in ('-r'):
            reverse = True
    if (url == None) or (warn == None) or (crit == None):
        usage()
        sys.exit(STATE_UNKNOWN)


    try:
        graphite_data = get_value(url, seconds, timeout)
    except Exception, e:
        print 'Error getting data from graphite: %s' % e
        sys.exit(STATE_UNKNOWN)

    print 'Current value: %s, warn threshold: %s, crit threshold: %s' % \
            (graphite_data, warn, crit)

    if reverse == True:
        if crit >= graphite_data:
            sys.exit(STATE_CRITICAL)
        elif warn >= graphite_data:
            sys.exit(STATE_WARNING)
        else:
            sys.exit(STATE_OK)
    else:
        if graphite_data >= crit:
            sys.exit(STATE_CRITICAL)
        elif graphite_data >= warn:
            sys.exit(STATE_WARNING)
        else:
            sys.exit(STATE_OK)


if __name__ == '__main__':
    main(sys.argv[1:])
